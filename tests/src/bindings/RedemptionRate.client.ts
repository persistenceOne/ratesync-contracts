/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, ConfigResponse, Config, ExecuteMsg, Decimal, ConfigParams, Price, InstantiateMsg, QueryMsg, RedemptionRateResponse, RedemptionRate } from "./RedemptionRate.types";
export interface RedemptionRateReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  redemptionRateRequest: ({
    price
  }: {
    price: Price;
  }) => Promise<RedemptionRateResponse>;
}
export class RedemptionRateQueryClient implements RedemptionRateReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.redemptionRateRequest = this.redemptionRateRequest.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  redemptionRateRequest = async ({
    price
  }: {
    price: Price;
  }): Promise<RedemptionRateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      redemption_rate_request: {
        price
      }
    });
  };
}
export interface RedemptionRateInterface extends RedemptionRateReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    config
  }: {
    config: ConfigParams;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  acceptOwnership: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  cancelOwnership: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setRedemptionRate: ({
    exchangeRate,
    price
  }: {
    exchangeRate: Decimal;
    price: Price;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RedemptionRateClient extends RedemptionRateQueryClient implements RedemptionRateInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.acceptOwnership = this.acceptOwnership.bind(this);
    this.cancelOwnership = this.cancelOwnership.bind(this);
    this.setRedemptionRate = this.setRedemptionRate.bind(this);
  }

  updateConfig = async ({
    config
  }: {
    config: ConfigParams;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        config
      }
    }, fee, memo, _funds);
  };
  acceptOwnership = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_ownership: {}
    }, fee, memo, _funds);
  };
  cancelOwnership = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_ownership: {}
    }, fee, memo, _funds);
  };
  setRedemptionRate = async ({
    exchangeRate,
    price
  }: {
    exchangeRate: Decimal;
    price: Price;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_redemption_rate: {
        exchange_rate: exchangeRate,
        price
      }
    }, fee, memo, _funds);
  };
}